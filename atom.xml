<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>弦上的梦</title>
  
  <subtitle>树木是大地对星空的渴望</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://janche.github.io/"/>
  <updated>2019-04-28T07:15:45.675Z</updated>
  <id>https://janche.github.io/</id>
  
  <author>
    <name>Janche</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>spring-security对OAuth2的集成（数据库的方式）</title>
    <link href="https://janche.github.io/2019/04/28/OAuth2/"/>
    <id>https://janche.github.io/2019/04/28/OAuth2/</id>
    <published>2019-04-28T01:06:42.000Z</published>
    <updated>2019-04-28T07:15:45.675Z</updated>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;h5 id=&quot;教程由来：项目需要为第三方客户端提供授权和资源访问，无疑OAuth2现在是最好的方式，如果OAuth2相关知识大家还不够了解，请移步到阮一峰的理解OAuth2-0，本文实战为主，理论方面请自行查阅相关资料。&quot;&gt;&lt;a href=&quot;#教程由来：项目需要为第三方客户端提供授权和资源访问，无疑OAuth2现在是最好的方式，如果OAuth2相关知识大家还不够了解，请移步到阮一峰的理解OAuth2-0，本文实战为主，理论方面请自行查阅相关资料。&quot; class=&quot;headerlink&quot; title=&quot;教程由来：项目需要为第三方客户端提供授权和资源访问，无疑OAuth2现在是最好的方式，如果OAuth2相关知识大家还不够了解，请移步到阮一峰的理解OAuth2.0，本文实战为主，理论方面请自行查阅相关资料。&quot;&gt;&lt;/a&gt;教程由来：项目需要为第三方客户端提供授权和资源访问，无疑OAuth2现在是最好的方式，如果OAuth2相关知识大家还不够了解，请移步到阮一峰的&lt;a href=&quot;https://www.ruanyifeng.com/blog/2014/05/oauth_2_0.html&quot;&gt;理解OAuth2.0&lt;/a&gt;，本文实战为主，理论方面请自行查阅相关资料。&lt;/h5&gt;&lt;/blockquote&gt;
&lt;h2 id=&quot;1-OAuth2的四种模式&quot;&gt;&lt;a href=&quot;#1-OAuth2的四种模式&quot; class=&quot;headerlink&quot; title=&quot;1. OAuth2的四种模式&quot;&gt;&lt;/a&gt;1. OAuth2的四种模式&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;授权码模式（authorization code）(最正统的方式，也是目前绝大多数系统所采用的)(支持refresh token) (用在服务端应用之间)&lt;/li&gt;
&lt;li&gt;密码模式（resource owner password credentials）(为遗留系统设计) (支持refresh token)&lt;/li&gt;
&lt;li&gt;简化模式（implicit）(为web浏览器应用设计)(不支持refresh token) (用在移动app或者web app，这些app是在用户的设备上的，如在手机上调起微信来进行认证授权)&lt;/li&gt;
&lt;li&gt;客户端模式（client credentials）(为后台api服务消费者设计) (不支持refresh token) (为后台api服务消费者设计)&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;本文采用数据库的方式对上述四种模式进行配置，网上绝大多数都是配置在内存中的demo，学习尚可，真实的开发环境却是还远远不够。&lt;/strong&gt; &lt;/p&gt;
    
    </summary>
    
    
      <category term="spring-security-oauth2" scheme="https://janche.github.io/tags/spring-security-oauth2/"/>
    
      <category term="oauth2" scheme="https://janche.github.io/tags/oauth2/"/>
    
  </entry>
  
  <entry>
    <title>mybatis的关联嵌套查询--分页详解</title>
    <link href="https://janche.github.io/2019/04/26/mybatis%E7%9A%84%E5%85%B3%E8%81%94%E5%B5%8C%E5%A5%97%E6%9F%A5%E8%AF%A2-%E5%88%86%E9%A1%B5%E8%AF%A6%E8%A7%A3/"/>
    <id>https://janche.github.io/2019/04/26/mybatis的关联嵌套查询-分页详解/</id>
    <published>2019-04-26T07:05:31.000Z</published>
    <updated>2019-04-26T07:06:49.837Z</updated>
    
    <summary type="html">
    
      &lt;h3 id=&quot;问题描述&quot;&gt;&lt;a href=&quot;#问题描述&quot; class=&quot;headerlink&quot; title=&quot;问题描述&quot;&gt;&lt;/a&gt;问题描述&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;1. mybatis嵌套查询后，分页混乱：mybatis通过查询结果之后折叠结果集把数据放在了集合里,这就导致总条数的混乱.而第一种的方式是分两次查询，分页只针对第一次查询,就不会有分页的问题,所以解决方案就是把你的collection写成第一种的方式&lt;/strong&gt;&lt;br&gt;&lt;strong&gt;2. 折叠结果集映射不上数据&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="mybatis" scheme="https://janche.github.io/tags/mybatis/"/>
    
      <category term="嵌套分页查询" scheme="https://janche.github.io/tags/%E5%B5%8C%E5%A5%97%E5%88%86%E9%A1%B5%E6%9F%A5%E8%AF%A2/"/>
    
  </entry>
  
  <entry>
    <title>docker部署springboot项目并连接mysql容器</title>
    <link href="https://janche.github.io/2019/04/26/docker%E9%83%A8%E7%BD%B2springboot%E9%A1%B9%E7%9B%AE%E5%B9%B6%E8%BF%9E%E6%8E%A5mysql%E5%AE%B9%E5%99%A8/"/>
    <id>https://janche.github.io/2019/04/26/docker部署springboot项目并连接mysql容器/</id>
    <published>2019-04-26T07:03:13.000Z</published>
    <updated>2019-04-26T07:07:54.330Z</updated>
    
    <summary type="html">
    
      &lt;h2 id=&quot;1-先拉取mysql镜像-因为比较慢&quot;&gt;&lt;a href=&quot;#1-先拉取mysql镜像-因为比较慢&quot; class=&quot;headerlink&quot; title=&quot;1. 先拉取mysql镜像(因为比较慢)&quot;&gt;&lt;/a&gt;1. 先拉取mysql镜像(因为比较慢)&lt;/h2&gt;&lt;p&gt;&lt;code&gt;docker pull mysql:5.7&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&quot;2-构建要部署的项目镜像&quot;&gt;&lt;a href=&quot;#2-构建要部署的项目镜像&quot; class=&quot;headerlink&quot; title=&quot;2. 构建要部署的项目镜像&quot;&gt;&lt;/a&gt;2. 构建要部署的项目镜像&lt;/h2&gt;&lt;h3 id=&quot;2-1-创建一个目录&quot;&gt;&lt;a href=&quot;#2-1-创建一个目录&quot; class=&quot;headerlink&quot; title=&quot;2.1 创建一个目录&quot;&gt;&lt;/a&gt;2.1 创建一个目录&lt;/h3&gt;
    
    </summary>
    
    
      <category term="docker" scheme="https://janche.github.io/tags/docker/"/>
    
      <category term="springboot" scheme="https://janche.github.io/tags/springboot/"/>
    
  </entry>
  
  <entry>
    <title>基于OpenCV对图片清晰度、色偏和亮度的检测（java版）</title>
    <link href="https://janche.github.io/2019/04/26/OpenCV/"/>
    <id>https://janche.github.io/2019/04/26/OpenCV/</id>
    <published>2019-04-26T06:57:09.000Z</published>
    <updated>2019-04-26T07:01:29.957Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;由来：近期项目需要检测图片的亮度和色偏，但网上大多为用C实现的，没有java版本的，此篇为java版本对opencv的调用，谨以此献给CSDN的广大用户。&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&quot;一-导入OpenCV所需依赖&quot;&gt;&lt;a href=&quot;#一-导入OpenCV所需依赖&quot; class=&quot;headerlink&quot; title=&quot;一. 导入OpenCV所需依赖&quot;&gt;&lt;/a&gt;一. 导入OpenCV所需依赖&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;依赖下载：&lt;/strong&gt;&lt;a href=&quot;https://download.csdn.net/download/qq_34997906/10978639&quot;&gt;OpenCV运行环境下载(包含jar包和dll依赖库)&lt;/a&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;在IDEA的项目模块下新建一个libs目录，将opencv-343.jar放进去，将opencv_java343.dll放到项目下。
    
    </summary>
    
    
      <category term="OpenCV" scheme="https://janche.github.io/tags/OpenCV/"/>
    
      <category term="图像清晰度、亮度、色偏检测" scheme="https://janche.github.io/tags/%E5%9B%BE%E5%83%8F%E6%B8%85%E6%99%B0%E5%BA%A6%E3%80%81%E4%BA%AE%E5%BA%A6%E3%80%81%E8%89%B2%E5%81%8F%E6%A3%80%E6%B5%8B/"/>
    
  </entry>
  
  <entry>
    <title>springmvc-validator</title>
    <link href="https://janche.github.io/2019/04/23/springmvc-validator/"/>
    <id>https://janche.github.io/2019/04/23/springmvc-validator/</id>
    <published>2019-04-23T14:04:55.000Z</published>
    <updated>2019-04-26T07:34:20.272Z</updated>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Spring-Boot-数据校验框架-springmvc-validator-使用说明&quot;&gt;&lt;a href=&quot;#Spring-Boot-数据校验框架-springmvc-validator-使用说明&quot; class=&quot;headerlink&quot; title=&quot;Spring Boot 数据校验框架 springmvc-validator 使用说明&quot;&gt;&lt;/a&gt;Spring Boot 数据校验框架 springmvc-validator 使用说明&lt;/h1&gt;&lt;h2 id=&quot;使用步骤&quot;&gt;&lt;a href=&quot;#使用步骤&quot; class=&quot;headerlink&quot; title=&quot;使用步骤&quot;&gt;&lt;/a&gt;使用步骤&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;依赖&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;code&gt;hibernate-validation&lt;/code&gt;,&lt;code&gt;validation-api&lt;/code&gt;已经被添加在&lt;code&gt;spring-boot-starter-web&lt;/code&gt;内，所以不需要添加依赖&lt;/p&gt;
    
    </summary>
    
    
      <category term="springmvc" scheme="https://janche.github.io/tags/springmvc/"/>
    
      <category term="validator" scheme="https://janche.github.io/tags/validator/"/>
    
  </entry>
  
  <entry>
    <title>随想录</title>
    <link href="https://janche.github.io/2019/04/23/%E9%9A%8F%E6%83%B3%E5%BD%95/"/>
    <id>https://janche.github.io/2019/04/23/随想录/</id>
    <published>2019-04-23T13:17:24.000Z</published>
    <updated>2019-04-26T03:30:36.497Z</updated>
    
    <summary type="html">
    
      
      
        
        
          
        
      
    
    </summary>
    
      <category term="日志" scheme="https://janche.github.io/categories/%E6%97%A5%E5%BF%97/"/>
    
    
      <category term="随想录" scheme="https://janche.github.io/tags/%E9%9A%8F%E6%83%B3%E5%BD%95/"/>
    
  </entry>
  
</feed>
