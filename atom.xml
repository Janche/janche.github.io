<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>弦上的梦</title>
  
  <subtitle>树木是大地对星空的渴望</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://janche.github.io/"/>
  <updated>2019-04-28T09:06:35.632Z</updated>
  <id>https://janche.github.io/</id>
  
  <author>
    <name>Janche</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>spring-security对OAuth2的集成（数据库的方式）</title>
    <link href="https://janche.github.io/2019/04/28/OAuth2/"/>
    <id>https://janche.github.io/2019/04/28/OAuth2/</id>
    <published>2019-04-28T01:06:42.000Z</published>
    <updated>2019-04-28T09:06:35.632Z</updated>
    
    <content type="html"><![CDATA[<blockquote><h5 id="教程由来：项目需要为第三方客户端提供授权和资源访问，无疑OAuth2现在是最好的方式，如果OAuth2相关知识大家还不够了解，请移步到阮一峰的理解OAuth2-0，本文实战为主，理论方面请自行查阅相关资料。"><a href="#教程由来：项目需要为第三方客户端提供授权和资源访问，无疑OAuth2现在是最好的方式，如果OAuth2相关知识大家还不够了解，请移步到阮一峰的理解OAuth2-0，本文实战为主，理论方面请自行查阅相关资料。" class="headerlink" title="教程由来：项目需要为第三方客户端提供授权和资源访问，无疑OAuth2现在是最好的方式，如果OAuth2相关知识大家还不够了解，请移步到阮一峰的理解OAuth2.0，本文实战为主，理论方面请自行查阅相关资料。"></a>教程由来：项目需要为第三方客户端提供授权和资源访问，无疑OAuth2现在是最好的方式，如果OAuth2相关知识大家还不够了解，请移步到阮一峰的<a href="https://www.ruanyifeng.com/blog/2014/05/oauth_2_0.html" target="_blank" rel="external">理解OAuth2.0</a>，本文实战为主，理论方面请自行查阅相关资料。</h5></blockquote><h2 id="1-OAuth2的四种模式"><a href="#1-OAuth2的四种模式" class="headerlink" title="1. OAuth2的四种模式"></a>1. OAuth2的四种模式</h2><ul><li>授权码模式（authorization code）(最正统的方式，也是目前绝大多数系统所采用的)(支持refresh token) (用在服务端应用之间)</li><li>密码模式（resource owner password credentials）(为遗留系统设计) (支持refresh token)</li><li>简化模式（implicit）(为web浏览器应用设计)(不支持refresh token) (用在移动app或者web app，这些app是在用户的设备上的，如在手机上调起微信来进行认证授权)</li><li>客户端模式（client credentials）(为后台api服务消费者设计) (不支持refresh token) (为后台api服务消费者设计)<blockquote><p><strong>本文采用数据库的方式对上述四种模式进行配置，网上绝大多数都是配置在内存中的demo，学习尚可，真实的开发环境却是还远远不够。</strong> </p><a id="more"></a><p>废话也就不多说了，咱进入正题吧。</p></blockquote><h2 id="2-所需依赖"><a href="#2-所需依赖" class="headerlink" title="2. 所需依赖"></a>2. 所需依赖</h2></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">//Springboot版本为2.0.2.RELEASE</span><br><span class="line"> &lt;dependency&gt;</span><br><span class="line">          &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">          &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;</span><br><span class="line">      &lt;/dependency&gt;</span><br><span class="line">&lt;!-- spring-security--&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">          &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">          &lt;artifactId&gt;spring-boot-starter-security&lt;/artifactId&gt;</span><br><span class="line">      &lt;/dependency&gt;</span><br><span class="line">       &lt;!-- OAuth2--&gt;</span><br><span class="line">      &lt;dependency&gt;</span><br><span class="line">          &lt;groupId&gt;org.springframework.security.oauth&lt;/groupId&gt;</span><br><span class="line">          &lt;artifactId&gt;spring-security-oauth2&lt;/artifactId&gt;</span><br><span class="line">          &lt;version&gt;2.3.0.RELEASE&lt;/version&gt;</span><br><span class="line">      &lt;/dependency&gt;</span><br></pre></td></tr></table></figure><h2 id="3-授权服务器"><a href="#3-授权服务器" class="headerlink" title="3. 授权服务器"></a>3. 授权服务器</h2><blockquote><p>授权服务器是OAuth2的两大核心之一，它将根据不同的授权类型为客户端提供不同的获取令牌的方式。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></td><td class="code"><pre><span class="line"> @Configuration</span><br><span class="line"> @EnableAuthorizationServer  // 授权服务器核心注解</span><br><span class="line"> protected static class AuthorizationServerConfiguration extends AuthorizationServerConfigurerAdapter &#123;</span><br><span class="line"></span><br><span class="line">     @Autowired</span><br><span class="line">     AuthenticationManager authenticationManager; // 注入manager</span><br><span class="line">     @Autowired</span><br><span class="line">     private DataSource dataSource;  // 注入数据源</span><br><span class="line">     @Autowired</span><br><span class="line">     SecurityUserService userDetailsService;  //</span><br><span class="line">     @Autowired</span><br><span class="line">     ClientDetailsService clientDetailsService; </span><br><span class="line">     @Autowired</span><br><span class="line">     private AuthorizationCodeServices authorizationCodeServices;</span><br><span class="line">     // redis 的相关配置已注释，若需启用，在tokenStore中注入即可。</span><br><span class="line">     // @Autowired</span><br><span class="line">     // private RedisConnectionFactory redisConnectionFactory;</span><br><span class="line">     // @Bean</span><br><span class="line">     // public TokenStore redisTokenStore() &#123;</span><br><span class="line">     //     return new RedisTokenStore(redisConnectionFactory);</span><br><span class="line">     // &#125;</span><br><span class="line">     /**</span><br><span class="line">      * 密码加密</span><br><span class="line">      */</span><br><span class="line">     @Bean</span><br><span class="line">     public PasswordEncoder passwordEncoder() &#123;</span><br><span class="line">         return new BCryptPasswordEncoder();</span><br><span class="line">     &#125;</span><br><span class="line">     /**</span><br><span class="line">      * ClientDetails实现</span><br><span class="line">      * @return</span><br><span class="line">      */</span><br><span class="line">     @Bean</span><br><span class="line">     public ClientDetailsService clientDetails() &#123;</span><br><span class="line">         return new JdbcClientDetailsService(dataSource);</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">     @Bean</span><br><span class="line">     public TokenStore tokenStore() &#123;</span><br><span class="line">         return new JdbcTokenStore(dataSource);</span><br><span class="line">     &#125;</span><br><span class="line">     /**</span><br><span class="line">      * 加入对授权码模式的支持</span><br><span class="line">      * @param dataSource</span><br><span class="line">      * @return</span><br><span class="line">      */</span><br><span class="line">     @Bean</span><br><span class="line">     public AuthorizationCodeServices authorizationCodeServices(DataSource dataSource) &#123;</span><br><span class="line">         return new JdbcAuthorizationCodeServices(dataSource);</span><br><span class="line">     &#125;</span><br><span class="line">     @Override</span><br><span class="line">     public void configure(ClientDetailsServiceConfigurer clients) throws Exception &#123;</span><br><span class="line">         // 1. 数据库的方式</span><br><span class="line">         clients.withClientDetails(clientDetails());</span><br><span class="line">// 2. 在内存中配置，这种方式不够灵活，学习倒是没有问题</span><br><span class="line">// //配置两个客户端,一个用于password认证一个用于client认证</span><br><span class="line">         // clients.inMemory().withClient(&quot;client_1&quot;)</span><br><span class="line">         //         .resourceIds(DEMO_RESOURCE_ID)</span><br><span class="line">         //         .authorizedGrantTypes(&quot;client_credentials&quot;, &quot;refresh_token&quot;)</span><br><span class="line">         //         .scopes(&quot;select&quot;)</span><br><span class="line">         //         .authorities(&quot;client&quot;)</span><br><span class="line">         //         .secret(&quot;123456&quot;)</span><br><span class="line">         //         .and().withClient(&quot;client_2&quot;)</span><br><span class="line">         //         .resourceIds(DEMO_RESOURCE_ID)</span><br><span class="line">         //         .authorizedGrantTypes(&quot;password&quot;, &quot;refresh_token&quot;)</span><br><span class="line">         //         .scopes(&quot;select&quot;)</span><br><span class="line">         //         .authorities(&quot;client&quot;)</span><br><span class="line">         //         .secret(&quot;123456&quot;);</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">     /**</span><br><span class="line">      * 声明授权和token的端点以及token的服务的一些配置信息，</span><br><span class="line">      * 比如采用什么存储方式、token的有效期等</span><br><span class="line">      * @param endpoints</span><br><span class="line">      */</span><br><span class="line">     @Override</span><br><span class="line">     public void configure(AuthorizationServerEndpointsConfigurer endpoints) &#123;</span><br><span class="line"></span><br><span class="line">         endpoints</span><br><span class="line">        // 使用redis的配置</span><br><span class="line">         // .tokenStore(new RedisTokenStore(redisConnectionFactory))</span><br><span class="line">         .tokenStore(tokenStore())</span><br><span class="line">                 .authenticationManager(authenticationManager)</span><br><span class="line">                 .userDetailsService(userDetailsService)</span><br><span class="line">                 .authorizationCodeServices(authorizationCodeServices)</span><br><span class="line">                 .setClientDetailsService(clientDetailsService);</span><br><span class="line">     &#125;</span><br><span class="line">     </span><br><span class="line">     /**</span><br><span class="line">      * 声明安全约束，哪些允许访问，哪些不允许访问</span><br><span class="line">      * @param oauthServer</span><br><span class="line">      */</span><br><span class="line">     @Override</span><br><span class="line">     public void configure(AuthorizationServerSecurityConfigurer oauthServer) &#123;</span><br><span class="line">         // 允许表单认证</span><br><span class="line">         oauthServer.allowFormAuthenticationForClients();</span><br><span class="line">         // 配置BCrypt加密</span><br><span class="line">         oauthServer.passwordEncoder(passwordEncoder());</span><br><span class="line">         // 对于CheckEndpoint控制器[框架自带的校验]的/oauth/check端点允许所有客户端发送器请求而不会被Spring-security拦截</span><br><span class="line">         oauthServer.tokenKeyAccess(&quot;permitAll()&quot;).checkTokenAccess(&quot;isAuthenticated()&quot;);</span><br><span class="line">         // 此处可添加自定义过滤器，对oauth相关的请求做进一步处理</span><br><span class="line">         // oauthServer.addTokenEndpointAuthenticationFilter(new Oauth2Filter());</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h2 id="4-资源服务器"><a href="#4-资源服务器" class="headerlink" title="4. 资源服务器"></a>4. 资源服务器</h2><blockquote><p><strong>1. 资源服务器主要配置拦截的路径，以及访问拦截的URL所需要的权限。</strong><br><strong>2. 本文，主系统、资源服务器和授权服务器放在一起的，很多人说这样配置security的主过滤器和资源服务器的过滤器会冲突，其实是不会的，资源服务器会优先于security主过滤器拦截你访问的URL，当然你也没必要在类上配置Order去改变他们的优先级，你只需要注意不要让你的资源服务器把security主过滤器放行的资源给拦截了就行。</strong></p></blockquote><p>下面直接上代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">@Configuration</span><br><span class="line">  @EnableResourceServer</span><br><span class="line">  protected static class ResourceServerConfiguration extends ResourceServerConfigurerAdapter &#123;</span><br><span class="line">private static final String RESOURCE_ID = &quot;oauth2&quot;;</span><br><span class="line">      @Override</span><br><span class="line">      public void configure(ResourceServerSecurityConfigurer resources) &#123;</span><br><span class="line">          // 如果关闭 stateless，则 accessToken 使用时的 session id 会被记录，后续请求不携带 accessToken 也可以正常响应</span><br><span class="line">          resources.resourceId(RESOURCE_ID).stateless(false);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      /**</span><br><span class="line">       * 为oauth2单独创建角色，这些角色只具有访问受限资源的权限，可解决token失效的问题</span><br><span class="line">       * @param http</span><br><span class="line">       * @throws Exception</span><br><span class="line">       */</span><br><span class="line">      @Override</span><br><span class="line">      public void configure(HttpSecurity http) throws Exception &#123;</span><br><span class="line">          http</span><br><span class="line">              // 获取登录用户的 session</span><br><span class="line">              .sessionManagement().sessionCreationPolicy(SessionCreationPolicy.IF_REQUIRED)</span><br><span class="line">              .and()</span><br><span class="line">                  // 资源服务器拦截的路径 注意此路径不要拦截主过滤器放行的URL</span><br><span class="line">                  .requestMatchers().antMatchers(&quot;/authmenu/**&quot;);</span><br><span class="line">          http</span><br><span class="line">              .authorizeRequests()</span><br><span class="line">                   // 配置资源服务器已拦截的路径才有效</span><br><span class="line">                  .antMatchers(&quot;/authmenu/**&quot;).authenticated();</span><br><span class="line">                  // .access(&quot; #oauth2.hasScope(&apos;select&apos;) or hasAnyRole(&apos;ROLE_超级管理员&apos;, &apos;ROLE_设备管理员&apos;)&quot;);</span><br><span class="line">                  </span><br><span class="line">          http</span><br><span class="line">              .exceptionHandling().accessDeniedHandler(new OAuth2AccessDeniedHandler())</span><br><span class="line">              .and()</span><br><span class="line">              .authorizeRequests()</span><br><span class="line">                  .anyRequest()</span><br><span class="line">                  .authenticated();</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><blockquote><h5 id="关于资源拦截做几点说明："><a href="#关于资源拦截做几点说明：" class="headerlink" title="关于资源拦截做几点说明："></a>关于资源拦截做几点说明：</h5><p><strong>1. 通过系统A用户申请的token除了能够访问到A用户被拦截的资源，还能够访问到A用户未被系统拦截的资源，所以最好为申请token的用户创建特定的角色（此类角色只能访问被资源服务器拦截的路径）。</strong><br><strong>2. 上述代码中` .antMatchers(“/authmenu/</strong>“).authenticated();`这段配置可以保证资源服务器不对本系统登录的用户做访问限制。**</p></blockquote><h2 id="5-主过滤器的配置"><a href="#5-主过滤器的配置" class="headerlink" title="5. 主过滤器的配置"></a>5. 主过滤器的配置</h2><blockquote><p><strong>关于主过滤器，每个人的配置可能不太一样，都是有一点是必须的，就是必须把authenticationManagerBean方法注册为bean，本文是基于前后端分离而开发，下文只出示了与OAuth2相关的配置，详细信息请参考文末的GitHub地址。</strong></p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">  @Bean</span><br><span class="line">  public AuthenticationManager authenticationManagerBean() throws Exception &#123;</span><br><span class="line">      return super.authenticationManagerBean();</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">@Override</span><br><span class="line">  protected void configure(HttpSecurity http) throws Exception &#123;</span><br><span class="line">      http</span><br><span class="line">          .authorizeRequests()</span><br><span class="line">              .anyRequest()</span><br><span class="line">              .authenticated()</span><br><span class="line">              .withObjectPostProcessor(urlObjectPostProcessor())</span><br><span class="line">              .and()</span><br><span class="line">          .formLogin()</span><br><span class="line">              .loginPage(&quot;/login&quot;)</span><br><span class="line">              .loginProcessingUrl(&quot;/login&quot;)</span><br><span class="line">              .usernameParameter(&quot;username&quot;)</span><br><span class="line">              .passwordParameter(&quot;password&quot;)</span><br><span class="line">              .permitAll()</span><br><span class="line">              .failureHandler(securityAuthenticationFailureHandler)</span><br><span class="line">              .successHandler(userLoginSuccessHandler)</span><br><span class="line">              .and()</span><br><span class="line">              .exceptionHandling()</span><br><span class="line">              .authenticationEntryPoint(securityAuthenticationEntryPoint)</span><br><span class="line">              .and()</span><br><span class="line">          .logout()</span><br><span class="line">              .deleteCookies(&quot;remove&quot;)</span><br><span class="line">              .invalidateHttpSession(false)</span><br><span class="line">              .logoutUrl(&quot;/logout&quot;)</span><br><span class="line">              .logoutSuccessHandler(securityLogoutSuccessHandler)</span><br><span class="line">              .permitAll()</span><br><span class="line">              .and()</span><br><span class="line">          .csrf().requireCsrfProtectionMatcher(new AntPathRequestMatcher(&quot;/oauth/authorize&quot;))</span><br><span class="line">              .disable();</span><br><span class="line"></span><br><span class="line">      http</span><br><span class="line">          .sessionManagement()</span><br><span class="line">               // 无效session跳转</span><br><span class="line">               .invalidSessionUrl(&quot;/login&quot;)</span><br><span class="line">               .maximumSessions(1)</span><br><span class="line">               // session过期跳转</span><br><span class="line">               .expiredUrl(&quot;/login&quot;)</span><br><span class="line">               .sessionRegistry(sessionRegistry());</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h2 id="6-OAuth2所需数据表"><a href="#6-OAuth2所需数据表" class="headerlink" title="6. OAuth2所需数据表"></a>6. OAuth2所需数据表</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line">--</span><br><span class="line">--  Oauth2 sql  -- MYSQL</span><br><span class="line">--</span><br><span class="line"></span><br><span class="line">Drop table  if exists oauth_client_details;</span><br><span class="line">create table oauth_client_details (</span><br><span class="line">  client_id VARCHAR(255) PRIMARY KEY,</span><br><span class="line">  resource_ids VARCHAR(255),</span><br><span class="line">  client_secret VARCHAR(255),</span><br><span class="line">  scope VARCHAR(255),</span><br><span class="line">  authorized_grant_types VARCHAR(255),</span><br><span class="line">  web_server_redirect_uri VARCHAR(255),</span><br><span class="line">  authorities VARCHAR(255),</span><br><span class="line">  access_token_validity INTEGER,</span><br><span class="line">  refresh_token_validity INTEGER,</span><br><span class="line">  additional_information TEXT,</span><br><span class="line">  create_time timestamp default now(),</span><br><span class="line">  archived tinyint(1) default &apos;0&apos;,</span><br><span class="line">  trusted tinyint(1) default &apos;0&apos;,</span><br><span class="line">  autoapprove VARCHAR (255) default &apos;false&apos;</span><br><span class="line">) ENGINE=InnoDB DEFAULT CHARSET=utf8;</span><br><span class="line"></span><br><span class="line">Drop table  if exists oauth_access_token;</span><br><span class="line">create table oauth_access_token (</span><br><span class="line">  create_time timestamp default now(),</span><br><span class="line">  token_id VARCHAR(255),</span><br><span class="line">  token BLOB,</span><br><span class="line">  authentication_id VARCHAR(255),</span><br><span class="line">  user_name VARCHAR(255),</span><br><span class="line">  client_id VARCHAR(255),</span><br><span class="line">  authentication BLOB,</span><br><span class="line">  refresh_token VARCHAR(255)</span><br><span class="line">) ENGINE=InnoDB DEFAULT CHARSET=utf8;</span><br><span class="line"></span><br><span class="line">Drop table  if exists oauth_refresh_token;</span><br><span class="line">create table oauth_refresh_token (</span><br><span class="line">  create_time timestamp default now(),</span><br><span class="line">  token_id VARCHAR(255),</span><br><span class="line">  token BLOB,</span><br><span class="line">  authentication BLOB</span><br><span class="line">) ENGINE=InnoDB DEFAULT CHARSET=utf8;</span><br><span class="line"></span><br><span class="line">Drop table  if exists oauth_code;</span><br><span class="line">create table oauth_code (</span><br><span class="line">  create_time timestamp default now(),</span><br><span class="line">  code VARCHAR(255),</span><br><span class="line">  authentication BLOB</span><br><span class="line">) ENGINE=InnoDB DEFAULT CHARSET=utf8;</span><br><span class="line"></span><br><span class="line">-- Add indexes</span><br><span class="line">create index token_id_index on oauth_access_token (token_id);</span><br><span class="line">create index authentication_id_index on oauth_access_token (authentication_id);</span><br><span class="line">create index user_name_index on oauth_access_token (user_name);</span><br><span class="line">create index client_id_index on oauth_access_token (client_id);</span><br><span class="line">create index refresh_token_index on oauth_access_token (refresh_token);</span><br><span class="line"></span><br><span class="line">create index token_id_index on oauth_refresh_token (token_id);</span><br><span class="line"></span><br><span class="line">create index code_index on oauth_code (code);</span><br></pre></td></tr></table></figure><blockquote><p><a href="https://blog.csdn.net/qq_34997906/article/details/89609297" target="_blank" rel="external">OAuth2表中所涉及字段的详细说明</a> </p></blockquote><p>最后附上我数据库的配置截图，嗯，差不多了。<br>截图：<br><img src="https://img-blog.csdnimg.cn/201904281408106.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM0OTk3OTA2,size_16,color_FFFFFF,t_70" alt="数据库oauth表"><br>测试就不用写了吧，网上一大堆。<br>项目Github地址：<a href="https://github.com/Janche/springboot-security-project.git" target="_blank" rel="external">https://github.com/Janche/springboot-security-project.git</a> （你的星星是对我最大的支持）</p><blockquote><h5 id="oauth2相关资料参考"><a href="#oauth2相关资料参考" class="headerlink" title="oauth2相关资料参考"></a>oauth2相关资料参考</h5><ol><li><a href="http://blog.didispace.com/spring-security-oauth2-xjf-1/" target="_blank" rel="external">程序猿DD-从零开始的Spring Security Oauth2（一）</a>\</li><li><a href="https://github.com/monkeyk/spring-oauth-server" target="_blank" rel="external">Spring Security &amp; OAuth2</a></li></ol></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;h5 id=&quot;教程由来：项目需要为第三方客户端提供授权和资源访问，无疑OAuth2现在是最好的方式，如果OAuth2相关知识大家还不够了解，请移步到阮一峰的理解OAuth2-0，本文实战为主，理论方面请自行查阅相关资料。&quot;&gt;&lt;a href=&quot;#教程由来：项目需要为第三方客户端提供授权和资源访问，无疑OAuth2现在是最好的方式，如果OAuth2相关知识大家还不够了解，请移步到阮一峰的理解OAuth2-0，本文实战为主，理论方面请自行查阅相关资料。&quot; class=&quot;headerlink&quot; title=&quot;教程由来：项目需要为第三方客户端提供授权和资源访问，无疑OAuth2现在是最好的方式，如果OAuth2相关知识大家还不够了解，请移步到阮一峰的理解OAuth2.0，本文实战为主，理论方面请自行查阅相关资料。&quot;&gt;&lt;/a&gt;教程由来：项目需要为第三方客户端提供授权和资源访问，无疑OAuth2现在是最好的方式，如果OAuth2相关知识大家还不够了解，请移步到阮一峰的&lt;a href=&quot;https://www.ruanyifeng.com/blog/2014/05/oauth_2_0.html&quot;&gt;理解OAuth2.0&lt;/a&gt;，本文实战为主，理论方面请自行查阅相关资料。&lt;/h5&gt;&lt;/blockquote&gt;
&lt;h2 id=&quot;1-OAuth2的四种模式&quot;&gt;&lt;a href=&quot;#1-OAuth2的四种模式&quot; class=&quot;headerlink&quot; title=&quot;1. OAuth2的四种模式&quot;&gt;&lt;/a&gt;1. OAuth2的四种模式&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;授权码模式（authorization code）(最正统的方式，也是目前绝大多数系统所采用的)(支持refresh token) (用在服务端应用之间)&lt;/li&gt;
&lt;li&gt;密码模式（resource owner password credentials）(为遗留系统设计) (支持refresh token)&lt;/li&gt;
&lt;li&gt;简化模式（implicit）(为web浏览器应用设计)(不支持refresh token) (用在移动app或者web app，这些app是在用户的设备上的，如在手机上调起微信来进行认证授权)&lt;/li&gt;
&lt;li&gt;客户端模式（client credentials）(为后台api服务消费者设计) (不支持refresh token) (为后台api服务消费者设计)&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;本文采用数据库的方式对上述四种模式进行配置，网上绝大多数都是配置在内存中的demo，学习尚可，真实的开发环境却是还远远不够。&lt;/strong&gt; &lt;/p&gt;
    
    </summary>
    
    
      <category term="spring-security-oauth2" scheme="https://janche.github.io/tags/spring-security-oauth2/"/>
    
      <category term="oauth2" scheme="https://janche.github.io/tags/oauth2/"/>
    
  </entry>
  
  <entry>
    <title>mybatis的关联嵌套查询--分页详解</title>
    <link href="https://janche.github.io/2019/04/26/mybatis%E7%9A%84%E5%85%B3%E8%81%94%E5%B5%8C%E5%A5%97%E6%9F%A5%E8%AF%A2-%E5%88%86%E9%A1%B5%E8%AF%A6%E8%A7%A3/"/>
    <id>https://janche.github.io/2019/04/26/mybatis的关联嵌套查询-分页详解/</id>
    <published>2019-04-26T07:05:31.000Z</published>
    <updated>2019-04-26T07:06:49.837Z</updated>
    
    <content type="html"><![CDATA[<h3 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h3><p><strong>1. mybatis嵌套查询后，分页混乱：mybatis通过查询结果之后折叠结果集把数据放在了集合里,这就导致总条数的混乱.而第一种的方式是分两次查询，分页只针对第一次查询,就不会有分页的问题,所以解决方案就是把你的collection写成第一种的方式</strong><br><strong>2. 折叠结果集映射不上数据</strong></p><a id="more"></a><h3 id="1-数据库"><a href="#1-数据库" class="headerlink" title="1. 数据库"></a>1. 数据库</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">-- 区域表：</span><br><span class="line">CREATE TABLE `area`  (</span><br><span class="line">  `id` bigint(11) NOT NULL AUTO_INCREMENT,</span><br><span class="line">  `parent_id` bigint(11),</span><br><span class="line">  `area_name` varchar(100),</span><br><span class="line">  `area_code` varchar(32),</span><br><span class="line">   PRIMARY KEY (`id`) USING BTREE</span><br><span class="line">) ;</span><br><span class="line"></span><br><span class="line">-- 设备表</span><br><span class="line">CREATE TABLE `device`  (</span><br><span class="line">  `id` bigint(11) NOT NULL AUTO_INCREMENT,</span><br><span class="line">  `area_id` bigint(11),</span><br><span class="line">  `device_name` varchar(64),</span><br><span class="line">  `device_code` varchar(36),</span><br><span class="line">  `device_type` varchar(36),</span><br><span class="line">   PRIMARY KEY (`id`) USING BTREE</span><br><span class="line">);</span><br></pre></td></tr></table></figure><blockquote><p><strong>关联说明：区域表和设备表是一对多的关系</strong></p></blockquote><h3 id="2-实体类"><a href="#2-实体类" class="headerlink" title="2. 实体类"></a>2. 实体类</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">// 区域类的DTO</span><br><span class="line">package com.device.dto;</span><br><span class="line">import lombok.Data;</span><br><span class="line">import java.util.List;</span><br><span class="line">@Data  // 此注解提供了实体类get和set方法</span><br><span class="line">public class AreaOutpDTO &#123;</span><br><span class="line">    private Long id;</span><br><span class="line">    private Long parentId;</span><br><span class="line">    private String areaName;</span><br><span class="line">    private String areaCode;</span><br><span class="line">    private List&lt;DeviceTypeNumDTO&gt; devices; // 设备数量DTO集合</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 设备数量的DTO，注意这里不是直接的设备类，而是对设备类型和数量的一个统计，若是设备类的话，则也没有那么复杂了</span><br><span class="line">package com.device.dto;</span><br><span class="line">import lombok.Data;</span><br><span class="line">@Data</span><br><span class="line">public class DeviceTypeNumDTO &#123;</span><br><span class="line">    private String deviceType; // 设备类型</span><br><span class="line">    private Long deviceNum;// 设备数量</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-Mapper-文件的编写"><a href="#3-Mapper-文件的编写" class="headerlink" title="3. Mapper 文件的编写"></a>3. Mapper 文件的编写</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">   &lt;resultMap id=&quot;AreaOutpDTOMap&quot; type=&quot;com.device.dto.AreaOutpDTO&quot;&gt;</span><br><span class="line">       &lt;id column=&quot;id&quot; jdbcType=&quot;BIGINT&quot; property=&quot;id&quot; /&gt;</span><br><span class="line">        &lt;result column=&quot;parent_id&quot; jdbcType=&quot;VARCHAR&quot; property=&quot;parentId&quot; /&gt;</span><br><span class="line">       &lt;result column=&quot;area_name&quot; jdbcType=&quot;VARCHAR&quot; property=&quot;areaName&quot; /&gt;</span><br><span class="line">       &lt;result column=&quot;area_code&quot; jdbcType=&quot;VARCHAR&quot; property=&quot;areaCode&quot; /&gt;</span><br><span class="line">       &lt;!-- 设备 类型数量集合 --&gt;</span><br><span class="line">       &lt;collection property=&quot;devices&quot; ofType=&quot;com.device.dto.DeviceTypeNumDTO&quot;</span><br><span class="line">                   select=&quot;selectDeviceTypeNumDTO&quot;</span><br><span class="line">                   column=&quot;id&quot;&gt;</span><br><span class="line">                   &lt;!-- 下面这两行可以不用写，但写了也不会通过它映射，只能通过下面的DeviceTypeNumDTOMap进行映射 --&gt;</span><br><span class="line">                    &lt;!-- &lt;result column=&quot;device_type&quot; jdbcType=&quot;VARCHAR&quot; property=&quot;deviceType&quot; /&gt;</span><br><span class="line">              &lt;result column=&quot;device_num&quot; jdbcType=&quot;BIGINT&quot; property=&quot;deviceNum&quot; /&gt;--&gt;</span><br><span class="line">       &lt;/collection&gt;</span><br><span class="line">   &lt;/resultMap&gt;</span><br><span class="line">   </span><br><span class="line">&lt;!-- 此Map必须写，否则数据无法映射到devices中 --&gt;</span><br><span class="line">   &lt;resultMap id=&quot;DeviceTypeNumDTOMap&quot; type=&quot;com.device.dto.DeviceTypeNumDTO&quot;&gt;</span><br><span class="line">       &lt;result column=&quot;device_type&quot; jdbcType=&quot;VARCHAR&quot; property=&quot;deviceType&quot; /&gt;</span><br><span class="line">       &lt;result column=&quot;device_num&quot; jdbcType=&quot;BIGINT&quot; property=&quot;deviceNum&quot; /&gt;</span><br><span class="line">   &lt;/resultMap&gt;</span><br><span class="line">   </span><br><span class="line">    &lt;select id=&quot;listSubArea&quot; resultMap=&quot;AreaOutpDTOMap&quot;&gt;</span><br><span class="line">       select</span><br><span class="line">       a.id,</span><br><span class="line">       a.parent_id,</span><br><span class="line">       a.area_name,</span><br><span class="line">       a.area_code,</span><br><span class="line">       from area a</span><br><span class="line">       where a.parent_id = #&#123;areaId&#125;</span><br><span class="line">   &lt;/select&gt;</span><br><span class="line">   &lt;select id=&quot;selectDeviceTypeNumDTO&quot; resultMap=&quot;DeviceTypeNumDTOMap&quot;&gt;</span><br><span class="line">     select</span><br><span class="line">       d.device_type, count(*) device_num</span><br><span class="line">     from device d</span><br><span class="line">     group by d.device_type, d.area_id</span><br><span class="line">     having d.area_id = #&#123;id&#125;</span><br><span class="line">   &lt;/select&gt;</span><br></pre></td></tr></table></figure><blockquote><p><strong>注意事项：(大坑) 开始没有写DeviceTypeNumDTOMap，而是将映射的字段写在collection中，发现无论如何都不能在折叠结果集中取到数据，而SQL却又是被调用了的。</strong></p></blockquote><p><strong>上述Mapper的处理过程:</strong><br>在调用mapper接口中的<code>listArea</code>方法，首先调用SQL<code>select a.id,a.parent_id, a.area_name,a.area_code,from area a where a.parent_id = #{areaId}</code>，从数据库中拿到返回数据之后，开始做返回值映射，此时的返回值映射对象是一个<code>resultMap</code>（id:AreaOutpDTOMap），该resultMap实际上是一个<code>AreaOutpDTO</code>的实例，因此在开始做映射的时候，id和  parent_id,area_name,area_code,因为属性名和数据库返回值一致完成映射，但是到了<code>devices</code>属性的时候，发现他是一个<code>collection</code>集合对象，里面存放的是DeviceTypeNumDTO实例，那怎么获取里面的数据？看collection标签的属性，他需要关联一个查询操作<code>select=&quot;selectDeviceTypeNumDTO&quot;</code>获取其数据，即通过<code>select d.device_type, count(*) device_num from device d group by d.device_type, d.area_id having d.area_id = #{id}</code>获取collection中的数据，<code>select=&quot;selectPer&quot;</code>操作需要传入数据，传入的数据<code>column=&quot;id&quot;</code>即是第一次查询中返回的<code>id</code>，<strong>最后一步，就是将第二次查询出来的数据映射到collection中,切记一定要写一个<code>ResultMap</code>来接受，不能直接在collection中添加字段来映射。</strong></p><h3 id="4-分页的处理"><a href="#4-分页的处理" class="headerlink" title="4. 分页的处理"></a>4. 分页的处理</h3><p><strong>经过上面的Mapper映射后，调用PageHelper插件已经是对折叠后的结果集进行分页了,成功解决分页总数混乱的问题</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">   public List&lt;AreaOutpDTO&gt; listSubArea(Integer page, Integer size, String orderBy, Long areaId) &#123;</span><br><span class="line">       PageHelper.startPage(page, size, orderBy);</span><br><span class="line">       return areaMapper.listSubArea(areaId, categoryId);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></p><h3 id="5-如果不分页，则采用mybatis的第二种映射方式"><a href="#5-如果不分页，则采用mybatis的第二种映射方式" class="headerlink" title="5. 如果不分页，则采用mybatis的第二种映射方式"></a>5. 如果不分页，则采用mybatis的第二种映射方式</h3><p><strong>仅改动Mapper文件，其余相同</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&lt;resultMap id=&quot;AreaOutpDTOMap&quot; type=&quot;com.device.dto.AreaOutpDTO&quot;&gt;</span><br><span class="line">       &lt;id column=&quot;id&quot; jdbcType=&quot;BIGINT&quot; property=&quot;id&quot; /&gt;  </span><br><span class="line">       &lt;result column=&quot;parent_id&quot; jdbcType=&quot;BIGINT&quot; property=&quot;parentId&quot; /&gt;</span><br><span class="line">       &lt;result column=&quot;area_name&quot; jdbcType=&quot;VARCHAR&quot; property=&quot;areaName&quot; /&gt;</span><br><span class="line">       &lt;result column=&quot;area_code&quot; jdbcType=&quot;VARCHAR&quot; property=&quot;areaCode&quot; /&gt;</span><br><span class="line">&lt;collection property=&quot;devices&quot; ofType=&quot;com.device.dto.DeviceTypeNumDTO&quot;&gt;</span><br><span class="line">        &lt;result column=&quot;device_type&quot; jdbcType=&quot;VARCHAR&quot; property=&quot;deviceType&quot; /&gt;</span><br><span class="line">      &lt;result column=&quot;device_num&quot; jdbcType=&quot;BIGINT&quot; property=&quot;deviceNum&quot; /&gt;</span><br><span class="line">       &lt;/collection&gt;</span><br><span class="line">   &lt;/resultMap&gt;</span><br><span class="line">   </span><br><span class="line">  &lt;select id=&quot;listArea&quot; resultMap=&quot;AreaOutpDTOMap&quot;&gt;</span><br><span class="line">     select</span><br><span class="line">      a.id,</span><br><span class="line">      a.parent_id,</span><br><span class="line">      a.area_name,</span><br><span class="line">      a.area_code,</span><br><span class="line">      c.device_type,</span><br><span class="line">      c.device_num</span><br><span class="line">    from area a</span><br><span class="line">    left join (</span><br><span class="line">             select</span><br><span class="line">                    d.area_id, d.device_type, count(*) device_num</span><br><span class="line">             from device d</span><br><span class="line">             group by d.device_type, d.area_id) c</span><br><span class="line">            on a.id = c.area_id</span><br><span class="line">    where a.parent_id = #&#123;areaId&#125;</span><br><span class="line">   &lt;/select&gt;</span><br></pre></td></tr></table></figure><p>转载请注明出处：<a href="https://blog.csdn.net/qq_34997906/article/details/84498115" target="_blank" rel="external">https://blog.csdn.net/qq_34997906/article/details/84498115</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;问题描述&quot;&gt;&lt;a href=&quot;#问题描述&quot; class=&quot;headerlink&quot; title=&quot;问题描述&quot;&gt;&lt;/a&gt;问题描述&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;1. mybatis嵌套查询后，分页混乱：mybatis通过查询结果之后折叠结果集把数据放在了集合里,这就导致总条数的混乱.而第一种的方式是分两次查询，分页只针对第一次查询,就不会有分页的问题,所以解决方案就是把你的collection写成第一种的方式&lt;/strong&gt;&lt;br&gt;&lt;strong&gt;2. 折叠结果集映射不上数据&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="mybatis" scheme="https://janche.github.io/tags/mybatis/"/>
    
      <category term="嵌套分页查询" scheme="https://janche.github.io/tags/%E5%B5%8C%E5%A5%97%E5%88%86%E9%A1%B5%E6%9F%A5%E8%AF%A2/"/>
    
  </entry>
  
  <entry>
    <title>docker部署springboot项目并连接mysql容器</title>
    <link href="https://janche.github.io/2019/04/26/docker%E9%83%A8%E7%BD%B2springboot%E9%A1%B9%E7%9B%AE%E5%B9%B6%E8%BF%9E%E6%8E%A5mysql%E5%AE%B9%E5%99%A8/"/>
    <id>https://janche.github.io/2019/04/26/docker部署springboot项目并连接mysql容器/</id>
    <published>2019-04-26T07:03:13.000Z</published>
    <updated>2019-04-26T07:07:54.330Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-先拉取mysql镜像-因为比较慢"><a href="#1-先拉取mysql镜像-因为比较慢" class="headerlink" title="1. 先拉取mysql镜像(因为比较慢)"></a>1. 先拉取mysql镜像(因为比较慢)</h2><p><code>docker pull mysql:5.7</code></p><h2 id="2-构建要部署的项目镜像"><a href="#2-构建要部署的项目镜像" class="headerlink" title="2. 构建要部署的项目镜像"></a>2. 构建要部署的项目镜像</h2><h3 id="2-1-创建一个目录"><a href="#2-1-创建一个目录" class="headerlink" title="2.1 创建一个目录"></a>2.1 创建一个目录</h3><a id="more"></a><p><strong>root@lr-pc:/usr/local/docker# <code>mkdir docker-web</code></strong><br>**1. 将需要部署的jar包拷贝到此目录下: <code>mv demo-pmsd.jar /usr/local/docker/docker-web</code></p><ol start="2"><li>新建一个Dockerfile文件: <code>vim Dockerfile</code>**<br>Dockerfile文件内容：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"># 基础镜像使用Java</span><br><span class="line">FROM java:8</span><br><span class="line"># 作者</span><br><span class="line">MAINTAINER lr</span><br><span class="line"># VOLUME 指定了临时文件目录为/tmp。</span><br><span class="line"># 其效果是在主机 /var/lib/docker 目录下创建了一个临时文件，并链接到容器的/tmp</span><br><span class="line">VOLUME /tmp</span><br><span class="line"># 将jar包添加到容器中并更名为app.jar</span><br><span class="line">ADD demo-pmsd.jar app.jar</span><br><span class="line"># 运行jar包</span><br><span class="line">RUN bash -c &apos;touch /app.jar&apos;</span><br><span class="line">ENTRYPOINT [&quot;java&quot;,&quot;-Djava.security.egd=file:/dev/./urandom&quot;,&quot;-jar&quot;,&quot;/app.jar&quot;]</span><br><span class="line"># 指定容器需要映射到主机的端口</span><br><span class="line">EXPOSE 8080</span><br></pre></td></tr></table></figure><h3 id="2-2-执行镜像构建命令"><a href="#2-2-执行镜像构建命令" class="headerlink" title="2.2 执行镜像构建命令"></a>2.2 执行镜像构建命令</h3><p><strong><code>docker image build -t demo-pmsd .</code> // 镜像名随意，注意最后有一个点</strong></p><blockquote><p>注意：需要在Dockerfile目录下执行， <code>.</code>表示在当前目录，也可指定目录。<br>可通过 <code>docker images</code>查看刚刚构建的镜像</p></blockquote><h3 id="3-开启mysql服务"><a href="#3-开启mysql服务" class="headerlink" title="3. 开启mysql服务"></a>3. 开启mysql服务</h3><h4 id="3-1-首先你需要在你的ubuntu系统上装好mysql，应该都装了把，没有的伙伴可以看我这篇教程：ubuntu18-04安装mysql5-7"><a href="#3-1-首先你需要在你的ubuntu系统上装好mysql，应该都装了把，没有的伙伴可以看我这篇教程：ubuntu18-04安装mysql5-7" class="headerlink" title="3.1 首先你需要在你的ubuntu系统上装好mysql，应该都装了把，没有的伙伴可以看我这篇教程：ubuntu18.04安装mysql5.7"></a>3.1 首先你需要在你的ubuntu系统上装好mysql，应该都装了把，没有的伙伴可以看我这篇教程：<a href="https://blog.csdn.net/qq_34997906/article/details/83046680" target="_blank" rel="external">ubuntu18.04安装mysql5.7</a></h4><h4 id="3-2-将你要部署项目的数据导入ubuntu的mysql-就是建数据库和导数据"><a href="#3-2-将你要部署项目的数据导入ubuntu的mysql-就是建数据库和导数据" class="headerlink" title="3.2 将你要部署项目的数据导入ubuntu的mysql(就是建数据库和导数据)"></a>3.2 将你要部署项目的数据导入ubuntu的mysql(就是建数据库和导数据)</h4><h4 id="3-3-重点-用刚刚拉取的mysql镜像启动容器"><a href="#3-3-重点-用刚刚拉取的mysql镜像启动容器" class="headerlink" title="3.3 (重点)用刚刚拉取的mysql镜像启动容器"></a>3.3 (重点)用刚刚拉取的mysql镜像启动容器</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -p 3306:3306 --name db -v /etc/mysql/conf:/etc/mysql/conf.d -v /usr/local/docker/mysql/logs:/logs -v /var/lib/mysql:/var/lib/mysql -e MYSQL_ROOT_PASSWORD=root -d -it mysql:5.7</span><br></pre></td></tr></table></figure><p><strong>命令解释：</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"># 容器终止运行后自动删除容器文件</span><br><span class="line"># --rm</span><br><span class="line"># 主机端口映射到容器端口</span><br><span class="line">#-p 3306:3306 </span><br><span class="line"># 给容器起别名（非常重要，项目中的数据库地址需要和别名一致）</span><br><span class="line">#--name db </span><br><span class="line"># 把主机的配置文件映射到容器的配置文件</span><br><span class="line">#-v /etc/mysql/conf:/etc/mysql/conf.d </span><br><span class="line"># 把主机的日志映射到容器的日志</span><br><span class="line">#-v /usr/local/docker/mysql/logs:/logs </span><br><span class="line"># 把主机的数据映射到容器（每次重启容器不用担心数据被清空了）</span><br><span class="line">#-v /var/lib/mysql:/var/lib/mysql </span><br><span class="line"># 数据库密码</span><br><span class="line">#-e MYSQL_ROOT_PASSWORD=root </span><br><span class="line"># 后台启动</span><br><span class="line">#-d </span><br><span class="line"># 容器的 Shell 映射到当前的 Shell，然后你在本机窗口输入的命令，就会传入容器。</span><br><span class="line">#-it </span><br><span class="line"># 来自哪一个镜像</span><br><span class="line">#mysql:5.7</span><br></pre></td></tr></table></figure></p><blockquote><p><strong>建议将此命令，写入一个可执行的文件，方便以后使用</strong></p></blockquote><h3 id="4-用刚生成的项目镜像启动容器"><a href="#4-用刚生成的项目镜像启动容器" class="headerlink" title="4. 用刚生成的项目镜像启动容器"></a>4. 用刚生成的项目镜像启动容器</h3><p><code>docker run --rm -d -p 8081:8080 --name demo-pmsd --link db:db demo-pmsd</code><br><strong>命令解释：</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"># 容器终止运行后自动删除容器文件</span><br><span class="line">#--rm</span><br><span class="line"># 后台启动</span><br><span class="line">#-d </span><br><span class="line"># 主机端口映射到容器端口</span><br><span class="line">#-p 8081:8080 </span><br><span class="line"># 为容器起别名</span><br><span class="line">#--name demo-pmsd</span><br><span class="line"># 连接提供mysql服务的容器，冒号后面是别名，别名应该和代码中的数据库地址一致(这点真的很重要)</span><br><span class="line">#--link db:db</span><br><span class="line"># 由哪个镜像生成的</span><br><span class="line">#demo-pmsd</span><br></pre></td></tr></table></figure></p><blockquote><p><strong>同样建议将此命令，写入一个可执行的文件，方便以后使用</strong></p></blockquote><h3 id="5-恩，没有然后了，你可以在浏览器端访问你的项目了localhost-8081。"><a href="#5-恩，没有然后了，你可以在浏览器端访问你的项目了localhost-8081。" class="headerlink" title="5.恩，没有然后了，你可以在浏览器端访问你的项目了localhost:8081。"></a>5.恩，没有然后了，你可以在浏览器端访问你的项目了<code>localhost:8081</code>。</h3><blockquote><p>参考：<a href="https://blog.csdn.net/qq_34997906/article/details/83002327" target="_blank" rel="external">docker常用命令</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;1-先拉取mysql镜像-因为比较慢&quot;&gt;&lt;a href=&quot;#1-先拉取mysql镜像-因为比较慢&quot; class=&quot;headerlink&quot; title=&quot;1. 先拉取mysql镜像(因为比较慢)&quot;&gt;&lt;/a&gt;1. 先拉取mysql镜像(因为比较慢)&lt;/h2&gt;&lt;p&gt;&lt;code&gt;docker pull mysql:5.7&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&quot;2-构建要部署的项目镜像&quot;&gt;&lt;a href=&quot;#2-构建要部署的项目镜像&quot; class=&quot;headerlink&quot; title=&quot;2. 构建要部署的项目镜像&quot;&gt;&lt;/a&gt;2. 构建要部署的项目镜像&lt;/h2&gt;&lt;h3 id=&quot;2-1-创建一个目录&quot;&gt;&lt;a href=&quot;#2-1-创建一个目录&quot; class=&quot;headerlink&quot; title=&quot;2.1 创建一个目录&quot;&gt;&lt;/a&gt;2.1 创建一个目录&lt;/h3&gt;
    
    </summary>
    
    
      <category term="docker" scheme="https://janche.github.io/tags/docker/"/>
    
      <category term="springboot" scheme="https://janche.github.io/tags/springboot/"/>
    
  </entry>
  
  <entry>
    <title>基于OpenCV对图片清晰度、色偏和亮度的检测（java版）</title>
    <link href="https://janche.github.io/2019/04/26/OpenCV/"/>
    <id>https://janche.github.io/2019/04/26/OpenCV/</id>
    <published>2019-04-26T06:57:09.000Z</published>
    <updated>2019-04-26T07:01:29.957Z</updated>
    
    <content type="html"><![CDATA[<p><strong>由来：近期项目需要检测图片的亮度和色偏，但网上大多为用C实现的，没有java版本的，此篇为java版本对opencv的调用，谨以此献给CSDN的广大用户。</strong></p><h3 id="一-导入OpenCV所需依赖"><a href="#一-导入OpenCV所需依赖" class="headerlink" title="一. 导入OpenCV所需依赖"></a>一. 导入OpenCV所需依赖</h3><p><strong>依赖下载：</strong><a href="https://download.csdn.net/download/qq_34997906/10978639" target="_blank" rel="external">OpenCV运行环境下载(包含jar包和dll依赖库)</a></p><ol><li>在IDEA的项目模块下新建一个libs目录，将opencv-343.jar放进去，将opencv_java343.dll放到项目下。<a id="more"></a>如图：<br><img src="https://img-blog.csdnimg.cn/20190227135253598.PNG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM0OTk3OTA2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>注意：opencv_java343.dll文件很多时候会加载不了，放在系统的path路径下也是可以的，jdk目录以及windows32目录下都是可行的，如果有强迫症的话就放在项目下吧。</li></ol><ol start="2"><li>pom 文件依赖引入<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">     &lt;groupId&gt;org.opencv&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;opencv&lt;/artifactId&gt;</span><br><span class="line">        &lt;version&gt;0.0.1&lt;/version&gt;</span><br><span class="line">        &lt;scope&gt;system&lt;/scope&gt;</span><br><span class="line">        &lt;systemPath&gt;$&#123;project.basedir&#125;/libs/opencv-343.jar&lt;/systemPath&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure></li></ol><h3 id="二-项目代码"><a href="#二-项目代码" class="headerlink" title="二. 项目代码"></a>二. 项目代码</h3><p><strong>1. 色偏检测</strong></p><blockquote><p><strong>原理说明： 网上常用的一种方法是将RGB图像转变到CIE L<em>a</em>b<em>空间，其中L</em>表示图像亮度，a<em>表示图像红/绿分量，b</em>表示图像黄/蓝分量。通常存在色偏的图像，在a<em>和b</em>分量上的均值会偏离原点很远，方差也会偏小；通过计算图像在a<em>和b</em>分量上的均值和方差，就可评估图像是否存在色偏。计算CIE L<em>a</em>b*空间是一个比较繁琐的过程，好在OpenCV提供了现成的函数，因此整个过程也不复杂。</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line">     * opencv 检测图片色偏</span><br><span class="line">     * jpegFile:待检测的图片</span><br><span class="line">     * calcCast 计算并返回一幅图像的色偏度以及，色偏方向</span><br><span class="line">     * cast 计算出的偏差值，小于1表示比较正常，大于1表示存在色偏</span><br><span class="line">     * da 红/绿色偏估计值，da大于0，表示偏红；da小于0表示偏绿</span><br><span class="line">     * db 黄/蓝色偏估计值，db大于0，表示偏黄；db小于0表示偏蓝</span><br><span class="line">     */</span><br><span class="line">    import org.opencv.core.Core;</span><br><span class="line">import org.opencv.core.Mat;</span><br><span class="line">import org.opencv.imgcodecs.Imgcodecs;</span><br><span class="line">import org.opencv.imgproc.Imgproc;</span><br><span class="line"></span><br><span class="line">    public static Boolean colorException(File jpegFile) &#123;</span><br><span class="line">        Mat srcImage = Imgcodecs.imread(jpegFile.getAbsolutePath());</span><br><span class="line">        Mat dstImage = new Mat();</span><br><span class="line">        //  将RGB图像转变到CIE L*a*b*</span><br><span class="line">        Imgproc.cvtColor(srcImage, dstImage, Imgproc.COLOR_BGR2Lab);</span><br><span class="line">        float a=0,b=0;</span><br><span class="line">        int HistA[] = new int[256],HistB[] = new int[256];</span><br><span class="line">        for(int i=0;i&lt;256;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            HistA[i]=0;</span><br><span class="line">            HistB[i]=0;</span><br><span class="line">        &#125;</span><br><span class="line">        int size= (int)dstImage.total() * dstImage.channels();</span><br><span class="line">        for(int i=0;i &lt; dstImage.rows(); i++)</span><br><span class="line">        &#123;</span><br><span class="line">            for(int j=0;j&lt; dstImage.cols(); j++)</span><br><span class="line">            &#123;</span><br><span class="line">                //在计算过程中，要考虑将CIEL*a*b*空间还原后同</span><br><span class="line">                a+=(float)(dstImage.get(i,j)[1]-128);</span><br><span class="line">                b+=(float)(dstImage.get(i,j)[2]-128);</span><br><span class="line">//                int x=Math.abs(dstImage.ptr(i,j).get(1));</span><br><span class="line">//                int y=Math.abs(dstImage.ptr(i,j).get(2));</span><br><span class="line">                int x=(int)dstImage.get(i,j)[1];</span><br><span class="line">                int y=(int)dstImage.get(i,j)[2];</span><br><span class="line">                HistA[x]++;</span><br><span class="line">                HistB[y]++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        float  da=a/(float)(dstImage.rows() * dstImage.cols());</span><br><span class="line">        float db=b/(float)(dstImage.rows() * dstImage.cols());</span><br><span class="line">        float D= (float)Math.sqrt(da*da+db*db);</span><br><span class="line">        float Ma=0,Mb=0;</span><br><span class="line">        for(int i=0;i&lt;256;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            //计算范围-128～127</span><br><span class="line">            Ma+=Math.abs(i-128-da)*HistA[i];</span><br><span class="line">            Mb+=Math.abs(i-128-db)*HistB[i];</span><br><span class="line">        &#125;</span><br><span class="line">        Ma/=(float)(dstImage.rows() * dstImage.cols());</span><br><span class="line">        Mb/=(float)(dstImage.rows() * dstImage.cols());</span><br><span class="line">        float M=(float)Math.sqrt(Ma*Ma+Mb*Mb);</span><br><span class="line">        float K=D/M;</span><br><span class="line">        float cast =K;</span><br><span class="line">        System.out.printf(&quot;色偏指数： %f\n&quot;,cast);</span><br><span class="line">        if(cast&gt;1.1) &#123;</span><br><span class="line">            System.out.printf(&quot;存在色偏\n&quot;);</span><br><span class="line">            return true;</span><br><span class="line">        &#125;</span><br><span class="line">        else &#123;</span><br><span class="line">            System.out.printf(&quot;不存在色偏\n&quot;);</span><br><span class="line">            return false;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p></blockquote><p><strong>2. 亮度检测</strong></p><blockquote><p><strong>原理说明：计算图片在灰度图上的均值和方差，当存在亮度异常时，均值会偏离均值点（可以假设为128），方差也会偏小；通过计算灰度图的均值和方差，就可评估图像是否存在过曝光或曝光不足。</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line">     * opencv 检测图片亮度</span><br><span class="line">     * brightnessException 计算并返回一幅图像的色偏度以及，色偏方向</span><br><span class="line">     * cast 计算出的偏差值，小于1表示比较正常，大于1表示存在亮度异常；当cast异常时，da大于0表示过亮，da小于0表示过暗</span><br><span class="line">     * 返回值通过cast、da两个引用返回，无显式返回值</span><br><span class="line">     */</span><br><span class="line">    import org.opencv.core.Core;</span><br><span class="line">import org.opencv.core.Mat;</span><br><span class="line">import org.opencv.imgcodecs.Imgcodecs;</span><br><span class="line">import org.opencv.imgproc.Imgproc;</span><br><span class="line"></span><br><span class="line">    public static Integer brightnessException ( File jpegFile) &#123;</span><br><span class="line">        Mat srcImage = Imgcodecs.imread(jpegFile.getAbsolutePath());</span><br><span class="line">        Mat dstImage = new Mat();</span><br><span class="line">        // 将RGB图转为灰度图</span><br><span class="line">        Imgproc.cvtColor(srcImage,dstImage, Imgproc.COLOR_BGR2GRAY);</span><br><span class="line">        float a=0;</span><br><span class="line">        int Hist[] = new int[256];</span><br><span class="line">        for(int i=0;i&lt;256;i++) &#123;</span><br><span class="line">            Hist[i] = 0;</span><br><span class="line">        &#125;</span><br><span class="line">        for(int i=0;i&lt;dstImage.rows();i++)</span><br><span class="line">        &#123;</span><br><span class="line">            for(int j=0;j&lt;dstImage.cols();j++)</span><br><span class="line">            &#123;</span><br><span class="line">                //在计算过程中，考虑128为亮度均值点</span><br><span class="line">                a+=(float)(dstImage.get(i,j)[0]-128);</span><br><span class="line">                int x=(int)dstImage.get(i,j)[0];</span><br><span class="line">                Hist[x]++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        float da =  a/(float)(dstImage.rows()*dstImage.cols());</span><br><span class="line">        System.out.println(da);</span><br><span class="line">        float D =Math.abs(da);</span><br><span class="line">        float Ma=0;</span><br><span class="line">        for(int i=0;i&lt;256;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            Ma+=Math.abs(i-128-da)*Hist[i];</span><br><span class="line">        &#125;</span><br><span class="line">        Ma/=(float)((dstImage.rows()*dstImage.cols()));</span><br><span class="line">        float M=Math.abs(Ma);</span><br><span class="line">        float K=D/M;</span><br><span class="line">        float cast = K;</span><br><span class="line">        System.out.printf(&quot;亮度指数： %f\n&quot;,cast);</span><br><span class="line">        if(cast&gt;=1) &#123;</span><br><span class="line">            System.out.printf(&quot;亮度：&quot;+da);</span><br><span class="line">            if(da &gt; 0) &#123;</span><br><span class="line">                System.out.printf(&quot;过亮\n&quot;);</span><br><span class="line">                return 2;</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                System.out.printf(&quot;过暗\n&quot;);</span><br><span class="line">                return 1;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            System.out.printf(&quot;亮度：正常\n&quot;);</span><br><span class="line">            return 0;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p></blockquote><p><strong>3. 图片颜色检测</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line">    * opencv 检测图片颜色</span><br><span class="line">    */</span><br><span class="line">   public static void imageColor ( File jpegFile) &#123;</span><br><span class="line">       Mat srcImage = Imgcodecs.imread(jpegFile.getAbsolutePath());</span><br><span class="line">       Mat dstImage = new Mat();</span><br><span class="line">       Imgproc.cvtColor(srcImage,dstImage, Imgproc.COLOR_BGR2HSV);</span><br><span class="line">       int i = 0 ,j = 0;</span><br><span class="line">       loop:for( i=0;i&lt;dstImage.rows();i++) &#123;</span><br><span class="line">           for(j=0;j&lt;dstImage.cols();j++) &#123;</span><br><span class="line">               //在计算过程中，考虑128为亮度均值点</span><br><span class="line">               double[] colorVec = dstImage.get(i,j);</span><br><span class="line">               int x=(int)dstImage.get(i,j)[0];</span><br><span class="line">               if((colorVec[0]&gt;=0&amp;&amp;colorVec[0]&lt;=180)</span><br><span class="line">                       &amp;&amp;(colorVec[1]&gt;=0&amp;&amp;colorVec[1]&lt;=255)</span><br><span class="line">                       &amp;&amp;(colorVec[2]&gt;=0&amp;&amp;colorVec[2]&lt;=46)) &#123;</span><br><span class="line">                   continue;</span><br><span class="line">               &#125;</span><br><span class="line">               else  if((colorVec[0]&gt;=0&amp;&amp;colorVec[0]&lt;=180)</span><br><span class="line">                       &amp;&amp;(colorVec[1]&gt;=0&amp;&amp;colorVec[1]&lt;=43)</span><br><span class="line">                       &amp;&amp;(colorVec[2]&gt;=46&amp;&amp;colorVec[2]&lt;=220))&#123;</span><br><span class="line">                   continue;</span><br><span class="line">               &#125;</span><br><span class="line">               else  if((colorVec[0]&gt;=0&amp;&amp;colorVec[0]&lt;=180)</span><br><span class="line">                       &amp;&amp;(colorVec[1]&gt;=0&amp;&amp;colorVec[1]&lt;=30)</span><br><span class="line">                       &amp;&amp;(colorVec[2]&gt;=221&amp;&amp;colorVec[2]&lt;=255))&#123;</span><br><span class="line">                   continue;</span><br><span class="line">               &#125;</span><br><span class="line">               else &#123;</span><br><span class="line">                   System.out.println(&quot;彩色图像&quot;);</span><br><span class="line">                   break loop;</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">       if(i==dstImage.rows() &amp;&amp; j==dstImage.cols()) &#123;</span><br><span class="line">           System.out.println(&quot;黑白图像&quot;);</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p><strong>4. 清晰度检测</strong><br>网上用opencv检测的各个版本均为c++/c#写的，二者的库依赖和方法变量名都存在较大的差异，转换太过麻烦，此处提供一个javacv的写法，以解部分老哥的燃眉之急。<br><strong>4.1 javacv依赖引入（依赖jar包较大）</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;org.bytedeco&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;javacv-platform&lt;/artifactId&gt;</span><br><span class="line">        &lt;version&gt;1.4.3&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">import org.bytedeco.javacpp.opencv_core;</span><br><span class="line">import org.bytedeco.javacpp.opencv_imgcodecs;</span><br><span class="line">import org.bytedeco.javacpp.opencv_imgproc;</span><br><span class="line"></span><br><span class="line"> /**</span><br><span class="line">     * javacv 检测图片清晰度</span><br><span class="line">     * 标准差越大说明图像质量越好</span><br><span class="line">     */</span><br><span class="line">    public static void clarityException(File jpegFile)&#123;</span><br><span class="line">        String path = &quot;E:\\test\\&quot;;</span><br><span class="line">        opencv_core.Mat srcImage = opencv_imgcodecs.imread(jpegFile.getAbsolutePath());</span><br><span class="line">        opencv_core.Mat dstImage = new opencv_core.Mat();</span><br><span class="line">        //转化为灰度图</span><br><span class="line">        opencv_imgproc.cvtColor(srcImage, dstImage, opencv_imgproc.COLOR_BGR2GRAY);</span><br><span class="line">        //在gray目录下生成灰度图片</span><br><span class="line">        opencv_imgcodecs.imwrite(path+&quot;gray-&quot;+jpegFile.getName(), dstImage);</span><br><span class="line"></span><br><span class="line">        opencv_core.Mat laplacianDstImage = new opencv_core.Mat();</span><br><span class="line">        //阈值太低会导致正常图片被误断为模糊图片，阈值太高会导致模糊图片被误判为正常图片</span><br><span class="line">        opencv_imgproc.Laplacian(dstImage, laplacianDstImage, opencv_core.CV_64F);</span><br><span class="line">        //在laplacian目录下升成经过拉普拉斯掩模做卷积运算的图片</span><br><span class="line">        opencv_imgcodecs.imwrite(path+&quot;laplacian-&quot;+jpegFile.getName(), laplacianDstImage);</span><br><span class="line"></span><br><span class="line">        //矩阵标准差</span><br><span class="line">        opencv_core.Mat stddev = new opencv_core.Mat();</span><br><span class="line"></span><br><span class="line">        //求矩阵的均值与标准差</span><br><span class="line">        opencv_core.meanStdDev(laplacianDstImage, new opencv_core.Mat(), stddev);</span><br><span class="line">        // ((全部元素的平方)的和)的平方根</span><br><span class="line">        // double norm = Core.norm(laplacianDstImage);</span><br><span class="line">        // System.out.println(&quot;\n矩阵的均值：\n&quot; + mean.dump());</span><br><span class="line">        System.out.println(jpegFile.getName() + &quot;矩阵的标准差：\n&quot; + stddev.createIndexer().getDouble());</span><br><span class="line">        // System.out.println(jpegFile.getName()+&quot;平方根：\n&quot; + norm);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><strong>最后的叮嘱：项目部署到服务器时，一定注意将opencv_java343.dll放在系统的path路径下，或者Tomcat的bin目录下。</strong></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;由来：近期项目需要检测图片的亮度和色偏，但网上大多为用C实现的，没有java版本的，此篇为java版本对opencv的调用，谨以此献给CSDN的广大用户。&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&quot;一-导入OpenCV所需依赖&quot;&gt;&lt;a href=&quot;#一-导入OpenCV所需依赖&quot; class=&quot;headerlink&quot; title=&quot;一. 导入OpenCV所需依赖&quot;&gt;&lt;/a&gt;一. 导入OpenCV所需依赖&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;依赖下载：&lt;/strong&gt;&lt;a href=&quot;https://download.csdn.net/download/qq_34997906/10978639&quot;&gt;OpenCV运行环境下载(包含jar包和dll依赖库)&lt;/a&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;在IDEA的项目模块下新建一个libs目录，将opencv-343.jar放进去，将opencv_java343.dll放到项目下。
    
    </summary>
    
    
      <category term="OpenCV" scheme="https://janche.github.io/tags/OpenCV/"/>
    
      <category term="图像清晰度、亮度、色偏检测" scheme="https://janche.github.io/tags/%E5%9B%BE%E5%83%8F%E6%B8%85%E6%99%B0%E5%BA%A6%E3%80%81%E4%BA%AE%E5%BA%A6%E3%80%81%E8%89%B2%E5%81%8F%E6%A3%80%E6%B5%8B/"/>
    
  </entry>
  
  <entry>
    <title>springmvc-validator</title>
    <link href="https://janche.github.io/2019/04/23/springmvc-validator/"/>
    <id>https://janche.github.io/2019/04/23/springmvc-validator/</id>
    <published>2019-04-23T14:04:55.000Z</published>
    <updated>2019-04-26T07:34:20.272Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Spring-Boot-数据校验框架-springmvc-validator-使用说明"><a href="#Spring-Boot-数据校验框架-springmvc-validator-使用说明" class="headerlink" title="Spring Boot 数据校验框架 springmvc-validator 使用说明"></a>Spring Boot 数据校验框架 springmvc-validator 使用说明</h1><h2 id="使用步骤"><a href="#使用步骤" class="headerlink" title="使用步骤"></a>使用步骤</h2><blockquote><p><strong>依赖</strong></p></blockquote><p><code>hibernate-validation</code>,<code>validation-api</code>已经被添加在<code>spring-boot-starter-web</code>内，所以不需要添加依赖</p><a id="more"></a><blockquote><p><strong>配置</strong></p></blockquote><p>SpringMVC的<code>javabean</code> 配置方式如下所示</p><blockquote><p>注意：快速失败方式才需要配置下面的，默认可以不用配置。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Validator <span class="title">validator</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ValidatorFactory validatorFactory = Validation.byProvider( HibernateValidator.class )</span><br><span class="line">            .configure()</span><br><span class="line">            .addProperty( <span class="string">"hibernate.validator.fail_fast"</span>, <span class="string">"true"</span> ) <span class="comment">//为true时代表快速失败模式，false则为全部校验后再结束。</span></span><br><span class="line">            .buildValidatorFactory();</span><br><span class="line">    Validator validator = validatorFactory.getValidator();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> validator;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><h3 id="两种常规校验"><a href="#两种常规校验" class="headerlink" title="两种常规校验"></a>两种常规校验</h3><blockquote><ol><li>在<code>Controller</code>类上加入<code>@Validated</code>注解</li><li>在方法参数中添加相应的注解</li><li>注意：若方法参数上没有<code>@Validated</code>注解，则需要在类上加<code>@Validated</code>注解</li></ol></blockquote><blockquote><p>参数为实体类对象<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SysRole</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> String id;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@NotNull</span>(message = <span class="string">"角色名称不能为空"</span>)</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Size</span>(min = <span class="number">6</span>, max = <span class="number">20</span>, message = <span class="string">"描述必须在6-20个字符之间"</span>)</span><br><span class="line">    <span class="keyword">private</span> String description;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Column</span>(name = <span class="string">"create_time"</span>)</span><br><span class="line">    <span class="keyword">private</span> Date createTime;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/demo"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">demo</span><span class="params">(@Valid SysRole sysRole, BindingResult result)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (result.hasErrors()) &#123;</span><br><span class="line">     List&lt;ObjectError&gt; allErrors = result.getAllErrors();</span><br><span class="line">     StringBuilder sb = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">     <span class="keyword">for</span> (ObjectError objectError : allErrors) &#123;</span><br><span class="line">         sb.append(objectError.getDefaultMessage() + <span class="string">";"</span>);</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">throw</span> <span class="keyword">new</span> ServiceException(sb.toString());  <span class="comment">// 此处一定要抛出异常，否则校验框架不起作用。</span></span><br><span class="line"> &#125;</span><br><span class="line">    <span class="comment">//do something  </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>参数为单个字段<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping</span>(<span class="string">"/demo"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">demo2</span><span class="params">(@Min(value = <span class="number">1</span>, message = <span class="string">"班级最小只能1"</span>)</span></span></span><br><span class="line"><span class="function">                   @<span class="title">Max</span><span class="params">(value = <span class="number">99</span>, message = <span class="string">"班级最大只能99"</span>)</span></span></span><br><span class="line"><span class="function">                   @<span class="title">RequestParam</span><span class="params">(name = <span class="string">"classroom"</span>, required = <span class="keyword">true</span>)</span> <span class="keyword">int</span> classroom) </span>&#123;</span><br><span class="line">                 <span class="comment">//do something  </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></blockquote><h3 id="分组校验"><a href="#分组校验" class="headerlink" title="分组校验"></a>分组校验</h3><blockquote><p><strong>1.新建两个接口</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">RoleUpdate</span> </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">RoleAdd</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p><strong>2.实体类中给字段加入分组</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SysRole</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="meta">@GeneratedValue</span>(strategy = GenerationType.IDENTITY)</span><br><span class="line">    <span class="meta">@NotEmpty</span>(message = <span class="string">"角色ID不能为空"</span>, groups = &#123;RoleUpdate.class&#125;)</span><br><span class="line">    <span class="keyword">protected</span> String id;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@NotEmpty</span>(message = <span class="string">"角色名称不能为空"</span>, groups = &#123;RoleAdd.class&#125;)</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String description;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p><strong>3.Controller中的使用</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/sys/role"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SysRoleController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping</span>(<span class="string">"/add"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> RestResult <span class="title">add</span><span class="params">(@Validated(&#123;RoleAdd.class&#125;)</span> SysRole sysRole, BindingResult result)</span>&#123;</span><br><span class="line">        CoreUtil.validationHandler(result);</span><br><span class="line">        sysRoleService.addRole(sysRole);</span><br><span class="line">        <span class="keyword">return</span> ResultGenerator.genSuccessResult();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping</span>(<span class="string">"/update"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> RestResult <span class="title">update</span><span class="params">(@Validated(&#123;RoleUpdate.class&#125;)</span> SysRole sysRole, BindingResult result) </span>&#123;</span><br><span class="line">        CoreUtil.validationHandler(result);</span><br><span class="line">        sysRoleService.update(sysRole);</span><br><span class="line">        <span class="keyword">return</span> ResultGenerator.genSuccessResult();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p><strong>4.组序列的使用：</strong></p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//指定组的验证顺序，前面组验证不通过的，后面组不进行验证</span></span><br><span class="line"><span class="meta">@GroupSequence</span>(&#123;RoleAdd.class, RoleUpdate.class, Default.class&#125;)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">GroupOrder</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="常见的注解："><a href="#常见的注解：" class="headerlink" title="常见的注解："></a>常见的注解：</h2><blockquote><p>所有注解均有message这个参数，即你需要返回或捕获的内容</p><ul><li><code>@Null(message=&quot;&quot;)</code>   被注释的元素必须为 null     </li><li><code>@NotNull</code>   被注释的元素必须不为 null     </li><li><code>@AssertTrue</code>     被注释的元素必须为 true     </li><li><code>@AssertFalse</code>    被注释的元素必须为 false     </li><li><code>@Min(value)</code>     被注释的元素必须是一个数字，其值必须大于等于指定的最小值     </li><li><code>@Max(value)</code>    被注释的元素必须是一个数字，其值必须小于等于指定的最大值     </li><li><code>@DecimalMin(value)</code>  被注释的元素必须是一个数字，其值必须大于等于指定的最小值     </li><li><code>@DecimalMax(value)</code>  被注释的元素必须是一个数字，其值必须小于等于指定的最大值     </li><li><code>@Size(max=, min=)</code>   被注释的元素的大小必须在指定的范围内     </li><li><code>@Digits (integer, fraction)</code>     被注释的元素必须是一个数字，其值必须在可接受的范围内     </li><li><code>@Past</code>   被注释的元素必须是一个过去的日期     </li><li><code>@Future</code>    被注释的元素必须是一个将来的日期     </li><li><code>@Pattern(regex=,flag=)</code>  被注释的元素必须符合指定的正则表达式     </li><li><code>@Email</code>  被注释的元素必须是电子邮箱地址     </li><li><code>@Length(min=,max=)</code>  被注释的字符串的大小必须在指定的范围内     </li><li><code>@NotEmpty</code>   被注释的字符串的必须非空     </li><li><code>@Range(min=,max=,message=)</code>  被注释的元素必须在合适的范围内</li></ul></blockquote><h2 id="异常信息处理"><a href="#异常信息处理" class="headerlink" title="异常信息处理"></a>异常信息处理</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">if</span>(exception <span class="keyword">instanceof</span> ConstraintViolationException)&#123;</span><br><span class="line">    ConstraintViolationException exs = (ConstraintViolationException) exception;</span><br><span class="line">    Set&lt;ConstraintViolation&lt;?&gt;&gt; violations = exs.getConstraintViolations();</span><br><span class="line">    <span class="keyword">for</span> (ConstraintViolation&lt;?&gt; item : violations) &#123;</span><br><span class="line">        <span class="comment">//打印验证不通过的信息</span></span><br><span class="line">        System.out.println(item.getMessage());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Spring-Boot-数据校验框架-springmvc-validator-使用说明&quot;&gt;&lt;a href=&quot;#Spring-Boot-数据校验框架-springmvc-validator-使用说明&quot; class=&quot;headerlink&quot; title=&quot;Spring Boot 数据校验框架 springmvc-validator 使用说明&quot;&gt;&lt;/a&gt;Spring Boot 数据校验框架 springmvc-validator 使用说明&lt;/h1&gt;&lt;h2 id=&quot;使用步骤&quot;&gt;&lt;a href=&quot;#使用步骤&quot; class=&quot;headerlink&quot; title=&quot;使用步骤&quot;&gt;&lt;/a&gt;使用步骤&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;依赖&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;code&gt;hibernate-validation&lt;/code&gt;,&lt;code&gt;validation-api&lt;/code&gt;已经被添加在&lt;code&gt;spring-boot-starter-web&lt;/code&gt;内，所以不需要添加依赖&lt;/p&gt;
    
    </summary>
    
    
      <category term="springmvc" scheme="https://janche.github.io/tags/springmvc/"/>
    
      <category term="validator" scheme="https://janche.github.io/tags/validator/"/>
    
  </entry>
  
  <entry>
    <title>随想录</title>
    <link href="https://janche.github.io/2019/04/23/%E9%9A%8F%E6%83%B3%E5%BD%95/"/>
    <id>https://janche.github.io/2019/04/23/随想录/</id>
    <published>2019-04-23T13:17:24.000Z</published>
    <updated>2019-04-26T03:30:36.497Z</updated>
    
    <content type="html"><![CDATA[<p><strong>弦上的博客之第一篇，没有想象中的那么激情澎湃，或许成功喜悦的分量和过程艰辛的程度确是有很大关系，当然这很大程度上得感谢Hexo的开源，感谢我东哥的分享，在今后那些不曾起舞的日子里，愿我能常在此留下点滴的印记。</strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;弦上的博客之第一篇，没有想象中的那么激情澎湃，或许成功喜悦的分量和过程艰辛的程度确是有很大关系，当然这很大程度上得感谢Hexo的开源，感谢我东哥的分享，在今后那些不曾起舞的日子里，愿我能常在此留下点滴的印记。&lt;/strong&gt;&lt;/p&gt;

      
    
    </summary>
    
      <category term="日志" scheme="https://janche.github.io/categories/%E6%97%A5%E5%BF%97/"/>
    
    
      <category term="随想录" scheme="https://janche.github.io/tags/%E9%9A%8F%E6%83%B3%E5%BD%95/"/>
    
  </entry>
  
</feed>
